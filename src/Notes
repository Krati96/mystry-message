function countElements(arr) {
    var elementCount = {};
    arr.forEach(function(element) {
        elementCount[element] = (elementCount[element] || 0) + 1;
    });
    return elementCount;
}

var arr = ["a", "v", "a"];
var result = countString(arr);
console.log(result);  //{ a: 2, v: 1 }

// A memoized function is a function that will never be called twice with the same inputs. Instead it will return a cached value.

// A higher-order component (HOC) is a function that takes a component as input and generates another component. Essentially, it stems from the compositional structure of React. These components are termed “pure” because they can adopt any dynamically provided child component without replicating or altering the behavior of the input components.

function convertTo24Hour(time12h) {
    const [time, modifier] = time12h.split(/(?=[APM])/);
    const [hours, minutes, seconds] = time.split(':');
    console.log(time,modifier)

    let hours24 = parseInt(hours, 10);
    if (modifier === 'P' && hours24 < 12) {
        hours24 += 12;
    } else if (modifier === 'AM' && hours24 === 12) {
        hours24 = 0;
    }
    return `${hours24.toString().padStart(2, '0')}:${minutes}:${seconds}`;
}

// Example usage:
const time12h = '07:05:45PM';
const time24h = convertTo24Hour(time12h);
console.log(time24h); // Output: 19:05:45


function countingSort(arr) {
    const n = arr.length;
    const maxVal = Math.max(...arr);
    const freq = new Array(maxVal + 1).fill(0);
    const sortedArr = new Array(n);

    // Count frequencies
    for (let i = 0; i < n; i++) {
        freq[arr[i]]++;
    }

    // Generate sorted array
    let sortedIndex = 0;
    for (let i = 0; i <= maxVal; i++) {
        while (freq[i] > 0) {
            sortedArr[sortedIndex++] = i;
            freq[i]--;
        }
    }

    return sortedArr;
}

// Example usage:
const arr = [1, 1, 3, 2, 1];
const sortedArr = countingSort(arr);
console.log(sortedArr); // Output: [1, 1, 1, 2, 3]
